FROM public.ecr.aws/gridx/base-images:debian-base-buster.latest as builder

RUN apt-get update && apt-get install -y --no-install-recommends \
  gcc \
  git \
  curl \
  ca-certificates \
  make \
  build-essential \
  wget 

WORKDIR /root

##########################
# BUILD GO-RELATED TOOLS #
##########################
ENV GOLANG_VERSION 1.19
ENV GOLANG_DOWNLOAD_SHA256 464b6b66591f6cf055bc5df90a9750bf5fbc9d038722bb84a9d56a2bea974be6

ENV GOLANG_TARBALL_FILE go$GOLANG_VERSION.linux-amd64.tar.gz
ENV GOLANG_DOWNLOAD_URL https://golang.org/dl/${GOLANG_TARBALL_FILE}

ENV GOSEC_VERSION 2.14.0
ENV GOSEC_TARBALL_FILE gosec_${GOSEC_VERSION}_linux_amd64.tar.gz
ENV GOSEC_DOWNLOAD_URL https://github.com/securego/gosec/releases/download/v${GOSEC_VERSION}/${GOSEC_TARBALL_FILE}
ENV GOSEC_DOWNLOAD_SHA256 226bd8825b7aed3d454446d1ec094f817f37859dded4211a5b707d0f36c5fdb7
ENV GO111MODULE on

RUN curl -fsSL "$GOLANG_DOWNLOAD_URL" -o golang.tar.gz \
  && echo "$GOLANG_DOWNLOAD_SHA256 golang.tar.gz" | sha256sum -c - \
  && tar -C /usr/local -xzf golang.tar.gz \
  && ln -sf /usr/local/go/bin/go /usr/local/bin

# Gosec
RUN curl -fsSL "$GOSEC_DOWNLOAD_URL" -o gosec.tar.gz \
  && echo "$GOSEC_DOWNLOAD_SHA256 gosec.tar.gz" | sha256sum -c - \
  && mkdir gosec && tar -C gosec -zxf gosec.tar.gz

# sift
ENV SIFT_VERSION v0.9.0
RUN go install github.com/svent/sift@${SIFT_VERSION}

# Gitleaks
RUN git clone https://github.com/zricethezav/gitleaks.git \
  && cd gitleaks \
  && make build

##################
# Miscellaneous #
#################
# RipGrep - Used for recusive searches
RUN curl -LO https://github.com/BurntSushi/ripgrep/releases/download/13.0.0/ripgrep_13.0.0_amd64.deb
RUN dpkg -i ripgrep_13.0.0_amd64.deb

#####################################
# Prepare image to use to run Salus #
#####################################
FROM public.ecr.aws/gridx/base-images:devpack-buster.latest
#debian:buster-slim

# Install libraries we need to install as root
RUN apt-get update && apt-get install -y --no-install-recommends \
  nodejs \
  npm \
  python3 \
  python3-pip \
  python3-dev \
  python3-setuptools \
  #python-wheel \
  musl-dev \
  make \
  cmake \
  g++ \
  gcc \
  gnupg2 \
  libicu-dev \
  #software-properties-common \
  && rm -rf \
    /var/lib/apt/lists/* \
    /var/cache/debconf/* \
    /var/log/* \ 
    /tmp/* \ 
    /var/tmp/* \
  && apt-get clean

##############################
# Install Python-based Tools #
##############################
# Install bandit, python static code scanner
ENV BANDIT_VERSION 1.7.4
RUN pip3 install bandit==${BANDIT_VERSION} \
  && pip3 install importlib_metadata==4.7.1

### semgrep
# https://semgrep.dev
ENV SEMGREP_VERSION 0.112.1
RUN pip3 install semgrep==${SEMGREP_VERSION}

# nodejsscan
RUN pip3 install njsscan

###############################################
# Install Ruby-related tools and dependencies #
###############################################

# Install a specific version of ruby with rvm
RUN gpg2 --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB \
  && curl -sSL https://get.rvm.io | bash -s stable \
  && bash -c -l ". /etc/profile.d/rvm.sh && rvm install 2.7.2" 

# ruby gems
COPY Gemfile Gemfile.lock /home/
RUN cd /home \
  && bash -c -l "gem install bundler -v '2.3.1' \
  && gem update --system \
  && bundle install --deployment --no-cache --clean --with scanners \
  && bundle exec bundle audit update \ 
  && bundle install --deployment --without development:test"

# Add user gridx to the rvm group
RUN usermod -a -G rvm gridx

### JS + Node
ENV NODE_VERSION 16.15.1
ENV NODE_TARBALL_FILE node-v${NODE_VERSION}-linux-x64.tar.gz
ENV NODE_DOWNLOAD_URL https://nodejs.org/dist/v${NODE_VERSION}/${NODE_TARBALL_FILE}
ENV NODE_DOWNLOAD_SHA256 f78a49c0c9c2f546c3a44eb434c49a852125441422a1bcfc433dedc58d6a241c
ENV NPM_VERSION 8.5.1
ENV YARN_VERSION 1.22.0
ENV NPM_CONFIG_LOGLEVEL info

COPY build/package.json build/yarn.lock /home/
RUN cd / \
  && curl -fsSL "$NODE_DOWNLOAD_URL" -o node.tar.gz \
  && echo "$NODE_DOWNLOAD_SHA256 node.tar.gz" | sha256sum -c - \
  && tar -C /usr/local -xzf node.tar.gz --strip-components=1 \
  && npm install -g npm@${NPM_VERSION} \
  && npm install -g yarn@${YARN_VERSION} \
  && cd /home \
  && yarn install \
  && rm -rf /node.tar.gz package.json yarn.lock /tmp/* ~/.npm

### Copy tools built in the previous
### `builder` stage into this image
#ENV PIP_VERSION 18.1
COPY --from=builder /root/go/bin/sift /usr/local/bin
COPY --from=builder /root/gosec/gosec /usr/local/bin
#COPY --from=builder /usr/local/go /usr/local/go
COPY --from=builder /usr/bin/rg /usr/bin/rg
COPY --from=builder /root/gitleaks/gitleaks /usr/local/bin
#RUN ln -sf /usr/local/go/bin/go /usr/local/bin

# Remove some of the installed packages
RUN apt-get remove --yes \
  python3-pip \
  python3-setuptools \
  make \
  cmake \
  g++ \
  gcc \
  gnupg2 

#############
### Salus ###
#############
WORKDIR /home

# make the folder for the repo (volumed in)
RUN mkdir -p /home/repo

# copy salus code
COPY Gemfile Gemfile.lock ./
COPY bin /home/bin
COPY lib /home/lib
COPY salus-default.yaml /home/

##################################
# Change user from root to gridx #
##################################
USER gridx

# run the salus scan when this docker container is run 
ENTRYPOINT ["bash", "-c", "-l", "bundle exec ./bin/salus scan"]
